#! /usr/bin/env python3

# Helper script that is sort of "poor man's CI": it keeps monitoring
# for changes to version controlled files under the current folder and
# runs a test build when a change is detected. The build is run by
# executing the "tools/build.sh test" command. Requires pyinotify (pip
# install pyinotify).

import sys
import os
import subprocess
from threading import Timer

import pyinotify


def run_tests():
    os.system("cls" if os.name == "nt" else "clear")
    os.system("pytest --tb=short -vv")


def file_is_in_git(path):
    status, _ = subprocess.getstatusoutput("git ls-files --error-unmatch %s" % path)
    return status == 0


class ModHandler(pyinotify.ProcessEvent):
    def __init__(self):
        self.timer = None
        self._run_tests()

    def _run_tests(self):
        if self.timer:
            # Try to cancel the timer if. This can prevent unnecessary
            # runs caused by rapid file changes, e.g., when git branch
            # changes.
            self.timer.cancel()
            # Wait for the thread to finish if has already started.
            self.timer.join()
        # Start a timer to call run_tests(), allowing for a brief
        # period for any file changes to come in.
        self.timer = Timer(0.5, run_tests)
        self.timer.start()

    def process_IN_CLOSE_WRITE(self, evt):
        if file_is_in_git(evt.pathname):
            self._run_tests()


def main():
    handler = ModHandler()
    wm = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wm, handler)
    wdd = wm.add_watch(".", pyinotify.IN_CLOSE_WRITE, rec=True)
    notifier.loop()


if __name__ == "__main__":
    main()
